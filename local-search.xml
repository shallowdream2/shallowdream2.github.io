<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>课程实验：分布式Key值存储系统</title>
    <link href="/2024/05/28/%E5%88%86%E5%B8%83%E5%BC%8FKV/"/>
    <url>/2024/05/28/%E5%88%86%E5%B8%83%E5%BC%8FKV/</url>
    
    <content type="html"><![CDATA[<h1>课程实验：分布式Key值存储系统</h1><h2 id="Task1：LSM-Tree源码阅读和分析">Task1：LSM Tree源码阅读和分析</h2><p>github链接：<a href="https://github.com/HuangDunD/RucDDBS">https://github.com/HuangDunD/RucDDBS</a></p><p>任务：阅读 src/storage 和 include/storage 部分的代码并完成代码分析报告</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8FKV/image-20240528001609952.png" alt="LST-TREE"></p><h3 id="Main-Data-Structure">Main Data Structure</h3><h4 id="Block">Block</h4><p><code>Block</code>类有以下成员函数：</p><ol><li><code>Block(const std::string &amp;block_content)</code>：构造函数，接受一个字符串参数，是包含某种数据块的字符串。</li><li><code>get(const std::string &amp;key) const</code>：接受一个Key作为参数，返回一个包含布尔值和字符串的对。这是用于从数据块中获取特定Key的值。</li><li><code>NewIterator() const</code>：返回一个指向<code>Iterator</code>的<code>std::unique_ptr</code>。这是用于遍历数据块的迭代器。</li><li><code>extract(uint64_t position, uint64_t *size, std::string &amp;s) const</code>：接受一个位置、一个大小指针和一个字符串引用作为参数。这是用于从数据块的特定位置提取数据的函数。</li></ol><p>此外，<code>Block</code>类还有一个私有成员变量<code>block_content_</code>，这是存储数据块内容的字符串。</p><p>注意，复制构造函数和赋值运算符被禁用，这意味着不能复制<code>Block</code>类的实例。这是因为<code>Block</code>类的实例包含大量数据，复制它们会消耗大量内存。</p><h4 id="Entry">Entry</h4><p>Entry 是一个KV结构的struct，存放<code>key_</code>,<code>value_</code></p><h4 id="SSTable">SSTable</h4><p>SSTable是用来存放Block的一个表，实现了以下接口</p><ol><li><code>SSTable</code>: 构造函数，接收一个ifstream，一个BlockCache。它文件的末尾读取索引的偏移量和大小，然后加载索引块并创建一个新的迭代器。</li><li><code>loadBlock</code> 方法用于从给定的偏移量和大小加载一个块。它从文件中读取块的数据。如果块是压缩的，它会使用snappy库进行解压缩。</li><li><code>get</code> 方法用于从SSTable中获取一个Key的值。它使用索引迭代器来查找包含该Key的块。如果找到了包含Key的块，它会从块中获取Key的值。如果没有找到包含Key的块，它会返回一个表示失败的对。</li></ol><h4 id="LevelZero">LevelZero</h4><p>LevelZero是对LST Tree DiskStorage的抽象，集成了DiskStorage面向的服务</p><p>支持 <code>add</code>,<code>search</code>,<code>save_meta</code>等功能</p><ul><li><code>add</code>方法：将<code>memtable</code>中的KV创建新的SSTable。这是将内存中的数据持久化到磁盘的过程。</li><li><code>search</code>方法：在<code>LevelZero</code>中查找指定的键。</li><li><code>size</code>方法：返回<code>LevelZero</code>的大小。</li><li><code>save_meta</code>方法：保存元数据。涉及到将内存中的数据写入磁盘。</li></ul><h4 id="DiskStorage">DiskStorage</h4><p>集成了LevelZero的disk layer服务，为 LST Tree的Disk部分，向上级提供服务。</p><ol><li><p><code>add</code>方法接受一个<code>SkipList</code>类型的参数<code>memtable</code>，将其添加到<code>level0_</code>中，并将<code>no_</code>的值加1。<code>no_</code>是一个用于跟踪添加操作的计数器。如果<code>level0_</code>溢出，需要调用一个合并函数（在这段代码中并未显示）。每次添加操作后，都会调用<code>save_meta</code>方法保存元数据。</p></li><li><p><code>search</code>方法接受一个字符串<code>key</code>作为参数，返回在<code>level0_</code>中搜索<code>key</code>的结果。返回类型是一个包含布尔值和字符串的对，布尔值表示是否找到了键，字符串则是键对应的值。</p></li><li><p><code>read_meta</code>方法用于读取元数据。如果元数据文件存在，它会打开文件并读取一个<code>uint64_t</code>类型的值到<code>no_</code>。如果元数据文件不存在，它会将<code>no_</code>设置为0，并调用<code>save_meta</code>方法保存元数据。</p></li><li><p><code>save_meta</code>方法用于保存元数据。它会打开元数据文件，并将<code>no_</code>的值作为字节流写入文件</p></li></ol><h4 id="SkipList">SkipList</h4><p>该类用于做内存中的mmtable，利用跳表为链表建立了多级索引，加速了CRUD速度。</p><ul><li><p><code>put</code> 在SkipList中插入一个新的KV。如果Key已经存在于跳跃列表中，那么就更新该Key的值；如果Key不存在，那么就创建一个新的节点。</p><p>函数首先使用<code>findGreatorOrEqual</code>函数查找大于或等于给定Key的第一个节点。如果找到的节点的Key等于给定的Key，那么就更新该节点的值，并更新跳跃列表的字节大小。</p><p>如果找到的节点的Key不等于给定的Key，那么就需要插入一个新的节点。首先，生成一个随机的height。如果生成的height大于当前的最大height，那么就需要扩大跳跃列表的height。然后，创建一个新的节点，并更新指针，使得新的节点正确地插入到跳跃列表中。最后，更新跳跃列表的条目数量和字节大小。</p></li><li><p><code>get</code> : 类似有序数组的查找，受segment的影响，平均时间为O(log(n))</p></li><li><p><code>del</code>: 先获取位置，类似链表的删除。</p></li><li><p><code>enlargeHeight</code>：由于height只影响效率，不影响正确性，仅仅加高head和tail的next array</p></li></ul><h4 id="KVStore">KVStore</h4><p>KVStore是面向事务的KV存储服务，支持以下操作：</p><ol><li><code>put</code>:接受KV对和一个事务对象。如果启用了log record，它会创建一个log并将其添加到log manager。然后，它将KV添加到内存表中。如果内存表的空间超过了预设的阈值，它会将内存表的内容添加到磁盘存储，并清空内存表。</li><li><code>del</code>：检查 mmtable中是否有，如果有，删除并记录到log record。如果mmtable中没有，就再diskstorage中搜索，找到了先缓存到mmtable，再返回</li><li><code>reset</code>： 清空mmtable</li><li><code>flush</code>： 将mmtable中的值flush到diskstorage</li></ol><h3 id="Layer-Graph">Layer Graph</h3><table><thead><tr><th>Module</th><th>SubModule</th><th>Description</th></tr></thead><tbody><tr><td>KVStore</td><td>mmTable(SkipList), DiskStorage</td><td>提供整个数据存储服务最高级抽象</td></tr><tr><td>mmTable</td><td></td><td>内存缓冲表，用SkipList实现</td></tr><tr><td>DiskStorage</td><td>LevelZero</td><td>提供Disk持久化服务</td></tr><tr><td>LevelZero</td><td>SSTable</td><td>与Disk交互的部分，其中有多个SSTable</td></tr><tr><td>SSTable</td><td>Block</td><td>有序的Table，方便顺序写入Disk</td></tr><tr><td>Block</td><td>Entry</td><td>SSTable中存取数据的最小单位，Entry</td></tr><tr><td>Entry</td><td></td><td>封装KV对</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>LSM Tree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>RUC-LABS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群搭建实战</title>
    <link href="/2024/05/20/page-2/"/>
    <url>/2024/05/20/page-2/</url>
    
    <content type="html"><![CDATA[<h1>k8s集群搭建实战</h1><p>详见 链接：<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html">https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html</a></p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浙江大学编译原理文档</title>
    <link href="/2024/05/20/page-1/"/>
    <url>/2024/05/20/page-1/</url>
    
    <content type="html"><![CDATA[<h1>浙江大学编译原理文档</h1><p>详见 链接：<a href="https://syuanz.wiki/accipit/">https://syuanz.wiki/accipit/</a></p>]]></content>
    
    
    <categories>
      
      <category>Complier Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S-Kafka-Strimzi-Kubedge实验</title>
    <link href="/2024/05/20/%E5%AE%9E%E9%AA%8C%E5%85%AB%E3%80%81%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    <url>/2024/05/20/%E5%AE%9E%E9%AA%8C%E5%85%AB%E3%80%81%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E4%B8%8E%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1>实验八、容器编排与通信</h1><h2 id="实验目标">实验目标</h2><p>使用docker cri做运行时容器，k8s做弹性容器管理系统，在此之上用kafka做中间件，实现一个简单的Producer-Consumer机制的demo。</p><p>最后利用kubedge框架将代理节点（broker节点）变为云端，剩下3个节点变成边缘节点</p><h2 id="实验过程">实验过程</h2><p>按照顺序，在华为云申请4个ECS节点，使用kubeadm部署k8s节点。先建立自己的docker image用于部署kafka application,最后部署kafka中间件、kubedge框架。</p><h3 id="k8s部署">k8s部署</h3><h4 id="申请节点">申请节点</h4><p>在华为云上申请4个ecs服务器，并带上弹性公网ip</p><ul><li><p>系统：CentOS 7</p></li><li><p>规格：2vCPUs | 4GiB | s7.large.2</p></li><li><p>安全组设置：k8s</p><p>已保存在云端，可以下载导入：<a href="https://k8s-security-huaweicloud.obs.cn-north-4.myhuaweicloud.com/%E5%AE%89%E5%85%A8%E7%BB%84-%E5%AF%BC%E5%87%BA%E8%A7%84%E5%88%99-%E5%8D%8E%E5%8C%97-%E5%8C%97%E4%BA%AC%E5%9B%9B-2024-05-25.xlsx">k8s-security</a></p></li></ul><h4 id="kubeadm搭建k8s集群">kubeadm搭建k8s集群</h4><p>参考：<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html">https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html</a></p><h5 id="共同步骤：该部分操作需要在所有节点上执行">共同步骤：该部分操作需要在所有节点上执行</h5><ul><li><p>关闭防火墙, 禁止防火墙开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure></li><li><p>永久关闭swap分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br>reboot<br></code></pre></td></tr></table></figure><p>这里会重启主机，等待即可</p></li><li><p>设置主机名</p><p>注意这里要设置成ecs服务器的内网ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br>your-master-node-ip  k8s-master<br>your-node1-ip     k8s-01<br>your-node2-ip     k8s-02<br>your-node3-ip k8s-03<br>EOF<br></code></pre></td></tr></table></figure></li><li><p>桥接的IPv4流量传递到iptables的链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.ipv4.ip_forward = 1<br>vm.swappiness = 0<br>EOF<br><br>modprobe br_netfilter<br>sysctl --system<br></code></pre></td></tr></table></figure></li><li><p>时间同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install ntpdate -y<br>ntpdate time.windows.com<br></code></pre></td></tr></table></figure></li><li><p>开启ipvs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install ipset ipvsadm<br><br>cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><br>chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4<br></code></pre></td></tr></table></figure></li><li><p>安装Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo<br><br>yum -y install docker-ce-18.06.3.ce-3.el7<br>systemctl enable docker &amp;&amp; systemctl start docker<br>docker version<br></code></pre></td></tr></table></figure></li><li><p>设置Docker镜像加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><br>sudo systemctl daemon-reload<br><br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>添加阿里云的YUM软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure></li><li><p>安装kubeadm、kubelet和kubectl</p><p>这里指定版本号为 k8s 1.18，可以自行安装更高版本的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0<br></code></pre></td></tr></table></figure><ul><li>修改 <code>/etc/sysconfig/kubelet</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sysconfig/kubelet<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改</span><br>KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;<br></code></pre></td></tr></table></figure><ul><li><p>设置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable kubelet<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="单独部署">单独部署</h5><ul><li><p>Master节点部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init \<br>  --apiserver-advertise-address=192.168.217.100 \<br>  --image-repository registry.aliyuncs.com/google_containers \<br>  --kubernetes-version v1.18.0 \<br>  --service-cidr=10.96.0.0/12 \<br>  --pod-network-cidr=10.244.0.0/16<br><br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br></code></pre></td></tr></table></figure></li></ul><p>​</p><ul><li><p>Master节点获取<em>加入命令</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm token create --ttl 0 --print-join-command<br></code></pre></td></tr></table></figure></li><li><p>其他节点加入集群</p><p>复制 <em>加入命令</em>，shell执行即可</p></li><li><p>Master节点使用kubectl工具查看节点状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes<br></code></pre></td></tr></table></figure></li><li><p>Master节点部署CNI网络插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="创建docker-image">创建docker image</h3><ul><li><p>如果你没有docker账号，请先注册docker账号，并创建一个repo</p></li><li><p>或者使用我准备好的docker image，那么你可以跳过整个2.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shallowdream2/mykafka:latest<br></code></pre></td></tr></table></figure></li><li><p>为了模拟kafka中的生产者-消费者模型，我们需要4个文件，<a href="http://xn--producer-ul7m3ly29p.py">分别是producer.py</a> , <a href="http://consumer1.py">consumer1.py</a>, <a href="http://consumer2.py">consumer2.py</a>, Dockerfile</p></li><li><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用官方的Python基础镜像</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span><br><br><span class="hljs-comment"># 安装Kafka Python客户端</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install kafka-python</span><br><br><span class="hljs-comment"># 将生产者和消费者脚本复制到容器中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> producer.py /app/producer.py</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> consumer1.py /app/consumer1.py</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> consumer2.py /app/consumer2.py</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br></code></pre></td></tr></table></figure></li><li><p><a href="http://producer.py">producer.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaProducer<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 创建Kafka生产者</span><br>producer = KafkaProducer(bootstrap_servers=<span class="hljs-string">&#x27;kafka:9092&#x27;</span>,<br>                         value_serializer=<span class="hljs-keyword">lambda</span> v: json.dumps(v).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-comment"># 生成消息并发送到Kafka</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message1 = &#123;<span class="hljs-string">&#x27;message1&#x27;</span>: <span class="hljs-string">&#x27;Hello Kafka, send to 1&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>: time.time()&#125;<br>    message2 = &#123;<span class="hljs-string">&#x27;message2&#x27;</span>: <span class="hljs-string">&#x27;Hello Kafka, send to 2&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>: time.time()&#125;<br>    producer.send(<span class="hljs-string">&#x27;test-topic&#x27;</span>, value=message1)<br>    producer.send(<span class="hljs-string">&#x27;test-topic-2&#x27;</span>, value=message2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Sent: <span class="hljs-subst">&#123;message1&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Sent: <span class="hljs-subst">&#123;message2&#125;</span>&#x27;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure></li><li><p><a href="http://consumer1.py">consumer1.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaConsumer<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 创建Kafka消费者</span><br>consumer = KafkaConsumer(<span class="hljs-string">&#x27;test-topic&#x27;</span>,<br>                         bootstrap_servers=<span class="hljs-string">&#x27;kafka:9092&#x27;</span>,<br>                         value_deserializer=<span class="hljs-keyword">lambda</span> m: json.loads(m.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br><br><span class="hljs-comment"># 处理消息</span><br><span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> consumer:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Consumer1 received: <span class="hljs-subst">&#123;message.value&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p><a href="http://consumer2.py">consumer2.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaConsumer<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 创建Kafka消费者</span><br>consumer = KafkaConsumer(<span class="hljs-string">&#x27;test-topic-2&#x27;</span>,<br>                         bootstrap_servers=<span class="hljs-string">&#x27;kafka:9092&#x27;</span>,<br>                         value_deserializer=<span class="hljs-keyword">lambda</span> m: json.loads(m.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br><br><span class="hljs-comment"># 处理消息</span><br><span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> consumer:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Consumer2 received: <span class="hljs-subst">&#123;message.value&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>创建docker镜像并push到docker hub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">假设上述文件在文件夹mykafka下</span><br>cd mykafka<br>docker build -t &lt;your-docker-name/your-repo:your-tag&gt;<br>docker push &lt;your-docker-name/your-repo:your-tag&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="部署-kafka">部署 kafka</h3><p>以下配置只需要在master节点执行，默认在~目录下。我只给出kafka-deployment.yaml的详情作为示例，其余见仓库</p><h4 id="配置文件">配置文件</h4><p>详见：<a href="https://github.com/shallowdream2/k8s-kafka-experiment">https://github.com/shallowdream2/k8s-kafka-experiment</a></p><ul><li><p>创建kafka-deployment.yaml</p><p>注意<code>metadata</code>中的<code>name</code> 字段不可改为<code>kafka</code>,会导致宏定义冲突使得port被错误设置为非INT</p><p>参考issue: <a href="https://github.com/wurstmeister/kafka-docker/issues/122">https://github.com/wurstmeister/kafka-docker/issues/122</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kafka-cluster</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kafka</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">kafka</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">kafka</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;node-role.kubernetes.io/master&quot;</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br>      <span class="hljs-attr">nodeSelector:</span> <br>        <span class="hljs-attr">kafka-broker:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kafka</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/kafka:latest</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9092</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">KAFKA_LISTENERS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">PLAINTEXT://0.0.0.0:9092</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">KAFKA_ADVERTISED_LISTENERS</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">PLAINTEXT://kafka:9092</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">KAFKA_ZOOKEEPER_CONNECT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">zookeeper:2181</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">KAFKA_PORT</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;9092&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kafka</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kafka</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9092</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9092</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">kafka</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><br></code></pre></td></tr></table></figure></li><li><p>创建zookeeper-deployment.yaml</p></li><li><p>创建kafka-topic.yaml</p></li><li><p>创建producer-deployment.yaml</p></li><li><p>创建consumer1-deployment.yaml</p></li><li><p>创建consumer2-deployment.yaml</p></li></ul><p>将上述文件上传到master节点，执行以下命令:</p><ul><li>查看nodes是否都是Ready状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes<br></code></pre></td></tr></table></figure><ul><li><p>部署deployment &amp;&amp; service &amp;&amp; job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f kafka-deployment.yaml<br><br>kubectl apply -f zookeeper-deployment.yaml<br><br>kubectl apply -f consumer1-deployment.yaml<br><br>kubectl apply -f consumer2-deployment.yaml<br><br>kubectl apply -f producer-deployment.yaml<br><br>kubectl apply -f kafka-topic.yaml<br></code></pre></td></tr></table></figure></li><li><p>查看运行状态</p><p>等待一会儿，如果都是Running，则运行成功！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods<br></code></pre></td></tr></table></figure></li><li><p>打印节点的输出</p><p>pod-name可以在<code>kubectl get pods</code>中查看,<code>-f</code>参数意为一直跟踪</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl logs -f &lt;pod-name&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="部署Kubedge">部署Kubedge</h3><p>参考: <a href="https://blog.csdn.net/zhangshihao11/article/details/130672867">https://blog.csdn.net/zhangshihao11/article/details/130672867</a></p><p>在master节点部署cloudcore，在其余节点部署edgecore</p><p>请前往<a href="https://github.com/kubeedge/kubeedge/tree/master">kubedge</a> 查看兼容性，选择兼容的版本，下面的instruction基于k8s 1.18</p><ul><li><p>使用Keadm进行部署(all nodes)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/kubeedge/kubeedge/releases/download/v1.12.1/keadm-v1.12.1-linux-amd64.tar.gz<br>tar -xvf keadm-v1.12.1-linux-amd64.tar.gz<br>cd keadm-v1.12.1-linux-amd64/keadm<br>mv ./keadm /usr/bin/<br></code></pre></td></tr></table></figure></li><li><p>Master-cloudcore</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keadm init --advertise-address=&lt;your-master-ip&gt; --kubeedge-version=1.12.1 <br></code></pre></td></tr></table></figure><ul><li><p>获取token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keadm gettoken<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Otherwise-edgecore</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keadm join --cloudcore-ipport=&lt;your-master-node-ip&gt;:10000  --kubeedge-version=1.12.1 --token= &lt;master-provide-token&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="使用strimzi部署用到的指令">使用strimzi部署用到的指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl delete deploy kafka</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl delete service kafka</span><br><br>kubectl delete kafka my-kafka-cluster<br><br>kubectl delete deploy zookeeper<br><br>kubectl delete deploy consumer1<br><br>kubectl delete deploy consumer2<br><br>kubectl delete deploy producer<br><br>kubectl delete pvc data-my-kafka-cluster-zookeeper-0<br>kubectl delete pvc data-my-kafka-cluster-zookeeper-1<br>kubectl delete pvc data-my-kafka-cluster-zookeeper-2<br><br>kubectl delete pvc data-my-kafka-cluster-kafka-0<br>kubectl delete pvc data-my-kafka-cluster-kafka-1<br>kubectl delete pvc data-my-kafka-cluster-kafka-2<br><br>kubectl delete storageclass local-storage<br><br>kubectl delete clusterrole strimzi-cluster-operator<br>kubectl delete clusterrolebinding strimzi-cluster-operator<br><br>kubectl delete pod -l name=strimzi-cluster-operator<br><br>kubectl delete pv local-pv<br>kubectl delete pv local-pv-zk-0<br>kubectl delete pv local-pv-zk-1<br>kubectl delete pv local-pv-zk-2<br><br>kubectl delete pv local-pv-kafka-0<br>kubectl delete pv local-pv-kafka-1<br>kubectl delete pv local-pv-kafka-2<br><br><br><br>kubectl apply -f strimzi-rbac.yaml<br><br>kubectl apply -f local-storageclass.yaml<br><br>kubectl apply -f zookeeper-localPV.yaml<br><br>kubectl apply -f zookeeper-localPVC.yaml<br><br>kubectl apply -f kafka-localPV.yaml<br>kubectl apply -f kafka-localPVC.yaml<br><br><br><br>kubectl apply -f kafka-deployment.yaml<br><br>kubectl apply -f consumer1-deployment.yaml<br><br>kubectl apply -f consumer2-deployment.yaml<br><br>kubectl apply -f producer-deployment.yaml<br><br>kubectl apply -f kafka-topic.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f strimzi-rbac.yaml</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f zookeeper-deployment.yaml  // not</span><br><br><br><br>kubectl logs -f consumer1-7478f8c64b-5wjdf <br><br>kubectl logs -f consumer2-6f57488b9f-s747z <br><br>kubectl logs -f producer-7f5564966b-bxnqn<br><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">keadm init --advertise-address=<span class="hljs-string">&quot;192.168.0.171&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">keadm <span class="hljs-built_in">join</span> --cloudcore-ipport=192.168.0.171:10000 --token=d75c5060c439e4d4559ae9231b773b8d86cf009f25d35af04b896e9bb42675df.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTY3MTA4ODB9.6KdE0qsuCebY_4JadXol1Bf7WQXqGbq2hkc13DAiJ5g</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cloud Computing</category>
      
      <category>Edge Computing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>RUC-LABS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理论计算机科学基础（5）——可归约性</title>
    <link href="/2024/05/16/page/"/>
    <url>/2024/05/16/page/</url>
    
    <content type="html"><![CDATA[<h1>理论计算机科学基础（5）——可归约性</h1><p>详见 blog: <a href="https://zemdalk.github.io/2022/04/07/%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80-5.html">https://zemdalk.github.io/2022/04/07/理论计算机科学基础-5.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Computation Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/16/hello-world/"/>
    <url>/2024/05/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
